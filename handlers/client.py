from aiogram.types import ReplyKeyboardRemove

from create_bot import bot, dp
from aiogram.utils.exceptions import CantInitiateConversation
from aiogram import types, Dispatcher

from data_base.postgre_db import *
from keyboards.client import *


async def start_command(message: types.Message):
    try:
        await bot.send_message(message.from_user.id, '–î–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è —Ç—É—Ç', reply_markup=client_keyboard)
        await message.delete()
    except CantInitiateConversation:
        await message.reply('–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')


async def bot_description(message: types.Message):
    await message.delete()
    await message.answer('''Five_Anime - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∏–º–µ —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ñ–∏–ª—å–º–æ–≤!''',
                         reply_markup=client_keyboard)


async def bot_helper(message: types.Message):
    await message.delete()
    await message.answer('''
    ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    üìå /menu
    üìå /start
    –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
    üìå /admin - –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ
    ''', reply_markup=client_keyboard)


async def bot_catalogue(message: types.Message):
    await message.delete()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!', reply_markup=catalogue_keyboard)


async def close_client_menu(callback_query: types.CallbackQuery):
    await callback_query.answer('–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ')
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    # await callback_query.message.edit_reply_markup(reply_markup=client_keyboard)


async def random_titles(callback_query: types.CallbackQuery):
    await callback_query.answer('–°–ª—É—á–∞–π–Ω—ã–µ —Ç–∞–π—Ç–ª—ã')
    rand_titles = await sql_get_random_titles()
    for title in rand_titles:
        await callback_query.message.answer_photo(title[5], f'{title[1]}\n–ì–æ–¥ –≤—ã—Ö–æ–¥–∞: {title[2]}\n–ñ–∞–Ω—Ä—ã: {title[3]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {title[4]}\n')

async def ongoing_titles(callback_query: types.CallbackQuery):
    await callback_query.answer('–û–Ω–≥–æ–∏–Ω–≥–∏')
    ongoing_titles_list = await sql_get_ongoing()
    for title in ongoing_titles_list:
        await callback_query.message.answer_photo(title[4], f'{title[0]}\n–ì–æ–¥ –≤—ã—Ö–æ–¥–∞: {title[1]}\n–ñ–∞–Ω—Ä—ã: {title[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {title[3]}\n')


async def film_titles(callback_query: types.CallbackQuery):
    await callback_query.answer('–§–∏–ª—å–º—ã')
    film_titles_list = await sql_get_films()
    for title in film_titles_list:
        await callback_query.message.answer_photo(title[4], f'{title[0]}\n–ì–æ–¥ –≤—ã—Ö–æ–¥–∞: {title[1]}\n–ñ–∞–Ω—Ä—ã: {title[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {title[3]}\n')


async def get_cats_for_titles(callback_query: types.CallbackQuery):
    await callback_query.answer('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    categories = await sql_get_cats_noFilms()
    await callback_query.message.edit_reply_markup(reply_markup=get_cats_markup(categories))


async def titles_by_cats(callback_query: types.CallbackQuery):
    await callback_query.answer('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    name = callback_query.data.replace('getcat_', '')
    titles_list = await sql_get_title_by_cat(name)
    for title in titles_list:
        await callback_query.message.answer_photo(title[4], f'{title[0]}\n–ì–æ–¥ –≤—ã—Ö–æ–¥–∞: {title[1]}\n–ñ–∞–Ω—Ä—ã: {title[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {title[3]}\n')


async def step_back(callback_query: types.CallbackQuery):
    await callback_query.answer('–ù–∞–∑–∞–¥')
    await callback_query.message.edit_reply_markup(reply_markup=catalogue_keyboard)


def register_handler_client(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=['start', 'menu'])
    dp.register_message_handler(bot_description, lambda message: message.text == "üîé –û –±–æ—Ç–µ")
    dp.register_message_handler(bot_helper, lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
    dp.register_message_handler(bot_catalogue, lambda message: message.text == "üìñ –ö–∞—Ç–∞–ª–æ–≥ –∞–Ω–∏–º–µ üìñ")
    dp.register_callback_query_handler(close_client_menu, lambda message: message.data.startswith("close_menu"))
    dp.register_callback_query_handler(random_titles, lambda message: message.data.startswith("random"))
    dp.register_callback_query_handler(ongoing_titles, lambda message: message.data.startswith("new_title"))
    dp.register_callback_query_handler(film_titles, lambda message: message.data.startswith("films"))
    dp.register_callback_query_handler(get_cats_for_titles, lambda message: message.data.startswith("genres"))
    dp.register_callback_query_handler(step_back, lambda message: message.data.startswith("step_back"))
    dp.register_callback_query_handler(titles_by_cats, lambda message: message.data and message.data.startswith("getcat_"))
